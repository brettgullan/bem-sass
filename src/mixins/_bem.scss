// ==============================
// 
//         Mixins - BEM
//
// ============================== 

@mixin init-bem-sass() {
  $__BEM-entities__: () !global;
}

// Set BEM configurations 
//
// @param { map } a BEM separator map (e.g (element: "__", modifier: "_"))
@mixin configure-bem-sass($map:null) { 
  $defaults: (
    default-prefix: "",
    block-types: (),
    element-sep: "__",
    modifier-sep: "_"
  );

  @if ($map) {
    $defaults: map-merge($defaults, $map);
  } 

  $__BEM-default-prefix__: map-get($defaults, "default-prefix") !global;
  $__BEM-block-types__: map-get($defaults, "block-types") !global;
  $__BEM-element-sep__: map-get($defaults, "element-sep") !global;
  $__BEM-modifier-sep__: map-get($defaults, "modifier-sep") !global;
}


// Generate BEM block selector 
//
// @param { String } name of the block
// @param { String } type of the block
// @author Yum<ym.jsng@gmail.com>
// @example
//  @include block(promo) {
//    ...styles here...
//  }
//  @include block(media, "object") {
//    ...styles here...
//  }
@mixin block($name, $type:null) {

  $BEM-block-entity: make-BEM-block-selector($name, $type);

  @if BEM-entity-exists($BEM-block-entity) {
    @error "Attempt to reassign `#{$BEM-block-entity}`"
  } 

  @if (register-BEM-entity($BEM-block-entity)) {
    #{$BEM-block-entity} {
      @content;
    }
  };

}


// Generate BEM element selector 
//
// @param { String } name of the element
// @author Yum<ym.jsng@gmail.com>
@mixin element($name) { 

  @if (& == null) {
    @error "element cannot be declared outside of a block"
  }

  @if (is-BEM-element(&)) {
    @error "element cannot be declared in another element"
  }

  @at-root {
    $BEM-element-entity: make-BEM-element-selector($name, is-BEM-modifier(&));

    @if BEM-entity-exists($BEM-element-entity) {
      @error "Attempt to reassign `#{$BEM-element-entity}`"
    }

    @if (register-BEM-entity($BEM-element-entity)) {
      #{$BEM-element-entity} {
        @content;
      }
    }
  }
}


// Generate BEM modifier selector 
//
// @param { String } name of the modifier 
// @author Yum<ym.jsng@gmail.com>
@mixin modifier($name, $value: null) { 
  @if (& == null) {
    @error "modifier cannot be declared ouside of a block"
  }

  @at-root {
    $BEM-modifier-entity: make-BEM-modifier-selector($name, $value, is-BEM-element(&));
    
    @if BEM-entity-exists($BEM-modifier-entity) {
      @error "Attempt to reassign `#{$BEM-modifier-entity}`"
    }

    @if register-BEM-entity($BEM-modifier-entity) {
      #{$BEM-modifier-entity} {
        @content;
      }
    }
  }
}

// Generate adjacent sibling selector of an element in a given modifier context
// @example
//
//  In scss:
//
//  @include block(list) {
//    @include modifier(ver, 2) {
//      @include element(item) {
//        @include adjacent-siblings {
//          border-top: 1px solid rgb(0, 0, 0);
//        }
//      }
//    }
//  }
//
//  When compiled:
//
//  .list_ver_2 .list__item + .list__item {
//    border-top: 1px solid rgb(0, 0, 0);
//  }
//
@mixin adjacent-siblings {

  @if (& == null) {
    @error "No context given";
  }

  @if (str-index(inspect(&), " ") == null) {
    @error "mixin `adjacent-siblings` is declared in invalid position";
  }

  $element: selector-to-string(
    str-slice(
      inspect(&), 
      str-index(inspect(&), " ") + 3
    )
  );

  & + #{$element} {
    @content;
  }
} 
