// ==============================
// 
//         Mixins - BEM
//
// ============================== 

// Initialize bem-sass
// @author  Yum<ym.jsng@gmail.com>
// @acess   public
@mixin init-bem-sass {

  @if is-bem-sass-initialized() {
    @error "bem-sass is already initialized";
  } 

  $__bem-sass__: (

    // a logger to keep BEM entities immutable 
    entities-log: (), 
  
    // a logger to check block level order(ITCSS) 
    levels-log: (), 

    // a logger to keep shared rules immutable
    shared-rules-log: (),

    // a storage to save block prefixes 
    prefix-log: (),

    // configurations
    config: (
      default-prefix: unquote(""),
      block-types: (),
      element-sep: unquote("__"),
      modifier-sep: unquote("_")
    ),

    state: (
      configured: false
    )
  ) !global;
}

// Configure bem-sass options 
// @author  Yum<ym.jsng@gmail.com>
// @acess   public
// @param   {Map} $options
@mixin configure-bem-sass($options:null) { 

  @if is-bem-sass-configured() { @error "bem-sass is already configured"; } 

  @if $options { 
    $options: unquote-map-values($options);

    // Store default-prefix to prefix-log;
    @if (
      map-has-key($options, "default-prefix") and 
      bem-sass-add("prefix-log", map-get($options, "default-prefix"))
    ) {};

    // Store prefixes of block types to prefix-log;
    @if (map-has-key($options, "block-types")) {
      @each $prefix in map-values(map-get($options, "block-types")) {
        @if (bem-sass-add("prefix-log", $prefix)) {};
      }
    }; 

    @if (
      bem-sass-set("config", map-merge(bem-sass-get("config"), $options)) and
      bem-sass-set("state" "configured", true)
    ) {};
  } 
}


// Generate BEM block selector 
// @author  Yum<ym.jsng@gmail.com>
// @acess   public
// @param   {String} $name -  name of the block
// @param   {String} $type - type of the block
// @example
//  @include block(promo) {
//    ...styles here...
//  }
//  @include block(media, "object") {
//    ...styles here...
//  }
@mixin block($name, $type:null) {

  $selector-string: create-selector("block", $name, (type: $type));

  @if bem-sass-exists(entities-log, $selector-string) {
    @error "Attempt to reassign `#{$selector-string}`"
  } 

  @if bem-sass-validate-levels($type) {
    @error "Invalid block order";
  } 

  @if (
    bem-sass-add(entities-log, $selector-string) and 
    bem-sass-add(levels-log, $type, $type == null)
  ) {
    #{$selector-string} {
      @content;
    }
  };

}


// Generate BEM element selector 
// @acess   public
// @author  Yum<ym.jsng@gmail.com>
// @param   {String} $name 
@mixin element($name) { 

  @if (not &) { @error "element should be inside of a block" } 
  @if (is-a-bem(element, &)) { @error "element should not be within another element" }

  @at-root {
    $selector-string: create-selector("element", $name, (in-a-modifier: is-a-bem(modifier, &)));

    @if bem-sass-exists(entities-log, $selector-string) {
      @error "Attempt to reassign `#{$selector-string}`"
    }

    @if (bem-sass-add(entities-log, $selector-string)) {
      #{$selector-string} {
        @content;
      }
    }
  }
}


// Generate BEM modifier selector 
// @acess   public
// @author  Yum<ym.jsng@gmail.com>
// @param   {String} $name 
@mixin modifier($name, $value: null) { 

  @if (not &) { @error "modifier should be inside of a block" }
  @if (is-a-bem(modifier, &)) { @error "modifier should not be within another modifier" }

  @at-root {
    $selector-string: create-selector("modifier", $name, (value: $value, in-an-element: is-a-bem(element, &)));
    
    @if bem-sass-exists(entities-log, $selector-string) {
      @error "Attempt to reassign `#{$selector-string}`"
    }

    @if bem-sass-add(entities-log, $selector-string) {
      #{$selector-string} {
        @content;
      }
    }
  }
}

// Generate adjacent sibling selector of an element in a given modifier context
// @acess   public
// @author  Yum<ym.jsng@gmail.com>
// @example
//
//  In scss:
//
//  @include block(list) {
//    @include modifier(ver, 2) {
//      @include element(item) {
//        @include adjacent-siblings {
//          border-top: 1px solid rgb(0, 0, 0);
//        }
//      }
//    }
//  }
//
//  When compiled:
//
//  .list_ver_2 .list__item + .list__item {
//    border-top: 1px solid rgb(0, 0, 0);
//  }
//
@mixin adjacent-siblings {

  @if (not &) { @error "No context given"; } 
  @if (str-index(inspect(&), " ") == null) {
    @error "mixin `adjacent-siblings` is declared in invalid position";
  }

  $element: selector-to-string(
    str-slice(
      inspect(&), 
      str-index(inspect(&), " ") + 3
    )
  );

  & + #{$element} {
    @content;
  }
} 


// Define common css rules to be shared with entities inside a given block
// @acess   public
// @author  Yum<ym.jsng@gmail.com>
// @param   {String} $name
@mixin def-shared-rules($name) {

  @if (not &) { @error "`def-shared-rules` should be inside of a block"; }

  $context: &; 
  $selector-string: create-selector("shared-rule", $name, (context: $context)); 

  @if bem-sass-exists(shared-rules-log, $selector-string) {
    @error "Attempt to reassign the shared rule `#{$name}` in `#{get-block($context)}`"
  }

  @if (bem-sass-add(shared-rules-log, $selector-string)) {
    @at-root #{create-selector("shared-rule", $name, (context: $context))} {
      @content
    }
  }

}


// Get common css rules inside a given block
// @acess   public
// @author  Yum<ym.jsng@gmail.com>
// @param   {String} $name
@mixin shared-rules($name) {
  $context: &; 
  @if (not $context) { @error "`rules` should be inside of a block"; } 

  $selector-string: create-selector("shared-rule", $name, (context: $context)); 
  @if (not bem-sass-exists("shared-rules-log", $selector-string)) {
    @error "There are no shared rule `#{$name}` in `#{get-block($context)}`";
  }

  @extend #{$selector-string};
}
