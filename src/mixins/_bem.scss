// ==============================
// 
//         Mixins - BEM
//
// ============================== 

@mixin init-bem-sass() {

  @if is-bem-sass-initialized() {
    @error "bem-sass is already initialized";
  } 

  $__bem-sass__: (
    entities: (),
    common-rules: (),
    prefixes: (),
    config: (
      default-prefix: unquote(""),
      block-types: (),
      element-sep: unquote("__"),
      modifier-sep: unquote("_")
    ),
    state: (
      configured: false
    )
  ) !global;
}

// Set BEM config 
//
// @param { map } a BEM separator map (e.g (element: "__", modifier: "_"))
@mixin configure-bem-sass($map:null) { 

  @if is-BEM-configured() {
    @error "bem-sass is already configured";
  } 

  @if $map { 
    $map: unquotize-map-string($map, "default-prefix");
    $map: unquotize-map-string($map, "element-sep");
    $map: unquotize-map-string($map, "modifier-sep"); 

    // Store default-prefix to prefixes;
    @if (
      map-has-key($map, "default-prefix") and 
      bem-sass-add("prefixes", map-get($map, "default-prefix"))
    ) {};

    // Store prefixes of block types to prefixes;
    @if (map-has-key($map, "block-types")) {
      @each $prefix in map-values(map-get($map, "block-types")) {
        @if (bem-sass-add("prefixes", $prefix)) {};
      }
    }; 

    @if (
      bem-sass-set("config", map-merge(bem-sass-get("config"), $map)) and
      bem-sass-set("state" "configured", true)
    ) {};
  } 
}


// Generate BEM block selector 
//
// @param { String } name of the block
// @param { String } type of the block
// @author Yum<ym.jsng@gmail.com>
// @example
//  @include block(promo) {
//    ...styles here...
//  }
//  @include block(media, "object") {
//    ...styles here...
//  }
@mixin block($name, $type:null) {

  $BEM-block-entity: make-BEM-block-selector($name, $type);

  @if bem-sass-exists("entities", $BEM-block-entity) {
    @error "Attempt to reassign `#{$BEM-block-entity}`"
  } 

  @if (bem-sass-add("entities", $BEM-block-entity)) {
    #{$BEM-block-entity} {
      @content;
    }
  };

}


// Generate BEM element selector 
//
// @param { String } name of the element
// @author Yum<ym.jsng@gmail.com>
@mixin element($name) { 

  @if (& == null) {
    @error "element should be inside of a block"
  }

  @if (is-an-element(&)) {
    @error "element should not be within another element"
  }

  @at-root {
    $BEM-element-entity: make-BEM-element-selector($name, is-a-modifier(&));

    @if bem-sass-exists("entities", $BEM-element-entity) {
      @error "Attempt to reassign `#{$BEM-element-entity}`"
    }

    @if (bem-sass-add("entities", $BEM-element-entity)) {
      #{$BEM-element-entity} {
        @content;
      }
    }
  }
}


// Generate BEM modifier selector 
//
// @param { String } name of the modifier 
// @author Yum<ym.jsng@gmail.com>
@mixin modifier($name, $value: null) { 
  @if (& == null) {
    @error "modifier should be inside of a block"
  }

  @at-root {
    $BEM-modifier-entity: make-BEM-modifier-selector($name, $value, is-an-element(&));
    
    @if bem-sass-exists("entities", $BEM-modifier-entity) {
      @error "Attempt to reassign `#{$BEM-modifier-entity}`"
    }

    @if bem-sass-add("entities", $BEM-modifier-entity) {
      #{$BEM-modifier-entity} {
        @content;
      }
    }
  }
}

// Generate adjacent sibling selector of an element in a given modifier context
// @example
//
//  In scss:
//
//  @include block(list) {
//    @include modifier(ver, 2) {
//      @include element(item) {
//        @include adjacent-siblings {
//          border-top: 1px solid rgb(0, 0, 0);
//        }
//      }
//    }
//  }
//
//  When compiled:
//
//  .list_ver_2 .list__item + .list__item {
//    border-top: 1px solid rgb(0, 0, 0);
//  }
//
@mixin adjacent-siblings {

  @if (& == null) {
    @error "No context given";
  }

  @if (str-index(inspect(&), " ") == null) {
    @error "mixin `adjacent-siblings` is declared in invalid position";
  }

  $element: selector-to-string(
    str-slice(
      inspect(&), 
      str-index(inspect(&), " ") + 3
    )
  );

  & + #{$element} {
    @content;
  }
} 


// Define common css rules to be share with elements inside a given block
// @param { String } rule-name
@mixin def-rules($rule-name) {
  $context: &;

  @if ($context == null) {
    @error "`def-rules` should be inside of a block";
  }

  @if bem-sass-exists("common-rules", make-rules-selector($rule-name, $context)) {
    @error "Attempt to reassign the common rules `#{$rule-name}` in `#{get-BEM-block($context)}`"
  }

  @if (bem-sass-add("common-rules", make-rules-selector($rule-name, $context))) {
    @at-root %#{make-rules-selector($rule-name, $context)} {
      @content
    }
  }

}


// Get common css rules inside a given block
// @param { String } rule-name
@mixin get-rules($rule-name) {
  $context: &;

  @if ($context == null) {
    @error "`rules` should be inside of a block";
  } 

  @if (not bem-sass-exists("common-rules", make-rules-selector($rule-name, $context))) {
    @error "There are no common rules `#{$rule-name}` in `#{get-BEM-block($context)}`";
  }

  @extend %#{make-rules-selector($rule-name, $context)};
}
