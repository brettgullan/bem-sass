// ======================================
// 
//        Functions - BEM constructor
//
// ======================================

// Construct BEM block selector string
//
// @param  { String } name of the block 
// @param  { String } type of the block 
// @return { String } the constructed BEM block selector string
@function make-block-selector($name, $type) {
  @return (
    "." + get-block-prefix-by-type($type) + $name
  );
}

// Construct BEM element selector string
//
// @param  { String } the element name
// @param  { Boolean } called in a modifier context? 
// @return { String } the constructed BEM element selector string
@function make-element-selector($name, $in-a-modifier: false) {

  @if ($in-a-modifier) {
    @return (
      & + ">" + make-element-selector($name)
    );
  }

  @return (
    get-block(&) + bem-sass-get("config", "element-sep") + $name
  );
}


// Construct BEM modifier selector string
// @param { String } the modifier name
// @param { Boolean } called in an element context?
// @return { String } the constructed BEM modifier selector string
@function make-modifier-selector($name, $value: null, $in-an-element: false) {

  @if ($value) {
    @return (
      attach-value-to-modifier(
        make-modifier-selector($name), 
        $value
      )
    );
  }

  @if ($in-an-element) {
    @return (
      & + bem-sass-get("config", "modifier-sep") + $name 
    )
  }

  @return (
    get-block(&) + bem-sass-get("config", "modifier-sep") + $name 
  );
} 


// Add a value string to given BEM modifier selector string
// @param { String } the modifier name
// @param { String } the value 
// @return { String } a value attached BEM modifier
@function attach-value-to-modifier($BEM-modifier-selector-string, $value) {
  @return ( 
    $BEM-modifier-selector-string + bem-sass-get("config", "modifier-sep") + $value
  );
}


// Make block's common rules placeholder
@function make-rules-selector($string, $context) {
  @return str-slice(get-block($context), 2) + "__CRS__" + $string;
} 


// Get BEM block selector(e.g "b-block") 
// from given selector list
// @param { List } the selector list
// @return { Unquoted String } the BEM block selector
@function get-block($selector) { 
  @return (
    get-block-part-from-string(
      selector-to-string($selector)
    )
  );
} 


// Get BEM block prefix by given type
// @param { String } the type of the block
// @return { String } the prefix of the block type
@function get-block-prefix-by-type($type: null) { 
  @if ($type == null) {
    @return bem-sass-get("config", "default-prefix");
  } 

  @if (
    bem-sass-get(
      "config", 
      "block-types", 
      $type
    )  == null
  ) {
    @error "block type `#{$type}` has not been declared";
  }

  @return bem-sass-get("config", "block-types", $type);
} 


// Get block part from given string 
// from given selector string
// @param   { String } the selector as string
// @return  { Unquoted String } selector as unquoted string
// @example
//    get-block-part-from-string(".b-block_mod") //=> ".b-block"
@function get-block-part-from-string($selector-string) {
  @return (
    attach-block-prefix(
      unquote(
        str-slice(
          remove-block-prefix($selector-string), 
          1, 
          sep-start-at(
            remove-block-prefix($selector-string)
          )
        )
      ), 
      get-block-prefix($selector-string)
    )
  );
}


// Remove block prefix from string
// @param   { String } a selector string
// @return  { String } the string removed it's block prefix
@function remove-block-prefix($selector-string) {
  @each $prefix in bem-sass-get("prefixes") {
    @if (str-index($selector-string, $prefix) == 2) {
      $selector-string: str-replace($selector-string, $prefix, "");
    }
  }
  @return $selector-string;
}

// Get block prefix from string
// @param   { String } a selector string
// @return  { String } the block prefix 
@function get-block-prefix($selector-string) {
  @each $prefix in bem-sass-get("prefixes") {
    @if (str-index($selector-string, $prefix) == 2) {
      @return str-slice($selector-string, 2, 2 + length($prefix));
    }
  }
  @return "";
}

// Attach block prefix to selector string
// @param   { String } a selector string
// @param   { String } a block prefix 
// @return  { String } the string which includes the block prefix 
@function attach-block-prefix($selector-string, $prefix) {
  @return str-insert($selector-string, $prefix, 2);
}


// Convert selector to unquoted string
// @param { List } the selector
// @param { Unquoted String } the selector as unquoted string
//
// This ensures a given selector is valid string like below:
//
//  (.selector) -> .selector #unquoted string
//
// @note
// Just using 'inspect' function doesn't meet the demand 
// since ruby-sass keeps parenthesis / comma in list
@function selector-to-string($selector) {
  @return(
    unquote(
      str-rm-parenthesis(
        str-rm-comma(
          inspect($selector)
        )
      )
    )
  );
} 


// Get an index of the first elem/modifier separator
// from a given selector string
// @param   { String } the selector as string
// @return  { Number } index of the separator
@function sep-start-at($selector-string) {
  $index-element-sep: str-index($selector-string, bem-sass-get("config", "element-sep"));
  $index-modifier-sep: str-index($selector-string, bem-sass-get("config", "modifier-sep"));

  @if ($index-element-sep and $index-modifier-sep) {
    @return min($index-element-sep, $index-modifier-sep) - 1;
  } 

  @if ($index-element-sep) {
    @return $index-element-sep - 1;
  } 

  @if ($index-modifier-sep) {
    @return $index-modifier-sep - 1;
  } 

  @return -1; 
} 


// Check if a given selector is a BEM modifier or not
// @param  { List } the selector
// @return { Boolean }
@function is-a-modifier($selector) {
  @if (
    str-match(
      remove-block-prefix(
        selector-to-string($selector)
      ),
      bem-sass-get("config", "modifier-sep")
    )
  ) {
    @return true;
  }
  @return false;
} 


// Check if a given selector is a BEM element or not
// @param  { List } the selector
// @return { Boolean }
@function is-an-element($selector) {
  @if (
    str-match(
      remove-block-prefix(
        selector-to-string($selector)
      ),
      bem-sass-get("config", "element-sep")
    )
  ) {
    @return true;
  }
  @return false;
} 
