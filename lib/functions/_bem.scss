// ==============================
// 
//        Functions - BEM
//
// ============================== 
/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  
  @return $string;
}

// Get BEM block selector(e.g "b-block") 
// from given selector list
// @param { List } the selector list
// @return { List | Unquoted String } the BEM block selector
@function get-BEM-block($selector) {

  @if is-BEM-block($selector) {
    @return selector-to-string($selector);
  } 

  @return (
    slice-off-BEM-block(
      selector-to-string($selector)
    )
  )
}

// Convert selector to unquoted string
// @param { List } the selector
// @param { Unquoted String } the selector as unquoted string
//
// This ensures a given selector is valid string like below:
//
//  (.selector) -> .selector #unquoted string
//
// @note
// Just using 'inspect' function doesn't meet the demand 
// since ruby-sass keeps list parenthesis / comma
@function selector-to-string($selector) {
  @return(
    unquote(
      remove-parenthesis(
        remove-comma(
          inspect($selector)
        )
      )
    )
  );
}

@function remove-comma($string) {
  @return str-replace($string, ",", "");
}

@function remove-parenthesis($string) {
  @return(
    str-replace(
      str-replace(
        $string, 
        "(", 
        ""
      ),
      ")",
      ""
    )
  );
}

// Extract BEM block 
// from given selector string
// @param   { String } the selector as string
// @return  { Unquoted String } selector as unquoted string
@function slice-off-BEM-block($selector-string) {
  @return (
    unquote(
      str-slice(
        $selector-string,
        1,
        sep-start-at($selector-string)
      )
    )
  )
}


// Get an index of the first elem/modifier separator
// from a given selector string
// @param   { String } the selector as string
// @return  { Number } index of the separator
@function sep-start-at($selector-string) {
  @if (str-index($selector-string, "_")) {
    @return str-index($selector-string, "_") - 1;
  }
  @return null; 
}


// Check if a given selector is a BEM block or not
// @param  { List } the selector
// @return { Boolean }
@function is-BEM-block($selector) {
  @return (
    not(is-BEM-mod($selector) or is-BEM-elem($selector))
  )
} 


// Check if a given selector is a BEM modifier or not
// @param  { List } the selector
// @return { Boolean }
@function is-BEM-mod($selector) {
  @if (str-index(inspect($selector), "_")) {
    @return true;
  }
  @return false;
}


// Check if a given selector is a BEM element or not
// @param  { List } the selector
// @return { Boolean }
@function is-BEM-elem($selector) {
  @if (str-index(inspect($selector), "__")) {
    @return true;
  }
  @return false;
}
