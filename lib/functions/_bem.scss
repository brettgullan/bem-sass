// ==============================
// 
//        Functions - BEM
//
// ============================== 

// Get BEM block selector(e.g "b-block") 
// from given selector list
// @param { List } the selector list
// @return { List | Unquoted String } the BEM block selector
@function get-BEM-block($selector) {

  @if is-BEM-block($selector) {
    @return selector-to-string($selector);
  } 

  @return (
    slice-off-BEM-block(
      selector-to-string($selector)
    )
  );
}

// Construct BEM element selector string
// @param { String } the element name
// @return { String } the constructed BEM element selector string
@function make-BEM-element-selector($name) {

  @if (in-BEM-modifier()) {
    @return (
      & + " " + get-BEM-block(&) + get-BEM-element-sep() + $name
    );
  }

  @return (
    get-BEM-block(&) + get-BEM-element-sep() + $name
  );
}

@function in-BEM-modifier() {
  @return is-BEM-mod(&);
}


// Construct BEM modifier selector string
// @param { String } the modifier name
// @return { String } the constructed BEM modifier selector string
@function make-BEM-modifier-selector($name, $value: null) {

  @if ($value == null) {
    @return (
      make-basic-BEM-modifier-selector($name) 
    );
  }

  @return (
    add-BEM-modifier-value(make-basic-BEM-modifier-selector($name), $value)
  );
}

@function make-basic-BEM-modifier-selector($name) {

  @if (in-BEM-element()) {
    @return (
      & + get-BEM-modifier-sep() + $name 
    );
  }

  @return (
    get-BEM-block(&) + get-BEM-modifier-sep() + $name 
  );
}

@function in-BEM-element() {
  @return is-BEM-elem(&);
}

// Add a value string to given BEM modifier selector string
// @param { String } the modifier name
// @param { String } the value 
// @return { String } a value attached BEM modifier
@function add-BEM-modifier-value($BEM-modifier-selector-string, $value) {
  @return ( 
    $BEM-modifier-selector-string + get-BEM-modifier-sep() + $value
  );
}

// Convert selector to unquoted string
// @param { List } the selector
// @param { Unquoted String } the selector as unquoted string
//
// This ensures a given selector is valid string like below:
//
//  (.selector) -> .selector #unquoted string
//
// @note
// Just using 'inspect' function doesn't meet the demand 
// since ruby-sass keeps parenthesis / comma in list
@function selector-to-string($selector) {
  @return(
    unquote(
      str-rm-parenthesis(
        str-rm-comma(
          inspect($selector)
        )
      )
    )
  );
} 

// Slice off BEM block string
// from given selector string
// @param   { String } the selector as string
// @return  { Unquoted String } selector as unquoted string
// @example
//    slice-off-BEM-block(".b-block_mod") //=> ".b-block"
@function slice-off-BEM-block($selector-string) {
  @return (
    unquote(
      str-slice(
        $selector-string,
        1,
        sep-start-at($selector-string)
      )
    )
  );
}


// Get an index of the first elem/modifier separator
// from a given selector string
// @param   { String } the selector as string
// @return  { Number } index of the separator
// @TODO 미리 정한 element, modifier 구분자 중 가장 먼저나오는 것을 식별할 수 있어야
@function sep-start-at($selector-string) {
  @if (str-index($selector-string, "_")) {
    @return str-index($selector-string, "_") - 1;
  }
  @return null; 
}


// Check if a given selector is a BEM block or not
// @param  { List } the selector
// @return { Boolean }
// @TODO element, modifier가 아닐 뿐 아니라, block인 것도 확실히 해야할 필요가. 
@function is-BEM-block($selector) {
  @return (
    not(is-BEM-mod($selector) or is-BEM-elem($selector))
  );
} 


// Check if a given selector is a BEM modifier or not
// @param  { List } the selector
// @return { Boolean }
// @TODO 온전히 modifier 구분자(*_*)를 찾을 방안을 마련해야
@function is-BEM-mod($selector) {
  @if (str-index(inspect($selector), "_")) {
    @return true;
  }
  @return false;
}


// Check if a given selector is a BEM element or not
// @param  { List } the selector
// @return { Boolean }
// @TODO 온전히 element 구분자(*_*)를 찾을 방안을 마련해야
@function is-BEM-elem($selector) {
  @if (str-index(inspect($selector), "__")) {
    @return true;
  }
  @return false;
}

// Get BEM element separator from settings 
// @return { String } BEM element separator
@function get-BEM-element-sep($null:null) {
  @return unquote($__BEM-element-sep__);
}

// Get BEM modifier separator from settings 
// @return { String } BEM modifier separator
@function get-BEM-modifier-sep($null:null) {
  @return unquote($__BEM-modifier-sep__);
}
